import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

public class Main {
    static int N, M, H, answer=5;
    static boolean[][] arr;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        arr = new boolean[H][N];

        for (int i = 0; i < M; i++) {
            st = new StringTokenizer(br.readLine());
            int x = Integer.parseInt(st.nextToken());
            int y = Integer.parseInt(st.nextToken());
            arr[x][y] = true;
        }

        DFS(0,0,0);
        System.out.println(answer > 3 ? -1 : answer);
    }

    private static void DFS(int count, int row, int col) {
        if (count>=answer) {
            return;
        }
        if (check()) {
            answer = count;
            return;
        }

        if (count == 3) return;

        for (int i = row; i <= H; i++, col = 1) {
            for (int j = col; j < N; j++) {
                if (arr[i][j] || arr[i][j - 1] || arr[i][j + 1]) continue;
                arr[i][j] = true;
                DFS(count + 1, i, j);
                arr[i][j] = false;
            }
        }
    }

    private static boolean check() {
        for (int i = 0; i < N; i++) {
            int k = i;
            for (int j = 0; j < H; j++) {
                if (arr[i][j]) {
                    k++;
                } else if (k > 1 && arr[i][k - 1]) {
                    k--;
                }
            }
            if (k != i) return false;
        }
        return true;
    }
}
